package main

// white = 1, black = 0
const (
	white = 1
	black = 0
)

// rook = 0, bishop = 1
const (
	rook   = 0
	bishop = 1
)

// enumerate board squares
const (
	a8 = uint64(iota)
	b8
	c8
	d8
	e8
	f8
	g8
	h8
	a7
	b7
	c7
	d7
	e7
	f7
	g7
	h7
	a6
	b6
	c6
	d6
	e6
	f6
	g6
	h6
	a5
	b5
	c5
	d5
	e5
	f5
	g5
	h5
	a4
	b4
	c4
	d4
	e4
	f4
	g4
	h4
	a3
	b3
	c3
	d3
	e3
	f3
	g3
	h3
	a2
	b2
	c2
	d2
	e2
	f2
	g2
	h2
	a1
	b1
	c1
	d1
	e1
	f1
	g1
	h1
)

// bitboard masks
const (
	//  e.g. all 0's in the "a" file, all 1's elsewhere
	//
	//  8    0  1  1  1  1  1  1  1
	//  7    0  1  1  1  1  1  1  1
	//  6    0  1  1  1  1  1  1  1
	//  5    0  1  1  1  1  1  1  1
	//  4    0  1  1  1  1  1  1  1
	//  3    0  1  1  1  1  1  1  1
	//  2    0  1  1  1  1  1  1  1
	//  1    0  1  1  1  1  1  1  1
	//
	//       a  b  c  d  e  f  g  h
	//       Bitboard: 18374403900871474942

	notAFile  = uint64(18374403900871474942)
	notHFile  = uint64(9187201950435737471)
	notABFile = uint64(18229723555195321596)
	notGHFile = uint64(4557430888798830399)
)

// easy way to lookup name of square from index in bitboard
var algebraic = [64]string{
	"a8", "b8", "c8", "d8", "e8", "f8", "g8", "h8",
	"a7", "b7", "c7", "d7", "e7", "f7", "g7", "h7",
	"a6", "b6", "c6", "d6", "e6", "f6", "g6", "h6",
	"a5", "b5", "c5", "d5", "e5", "f5", "g5", "h5",
	"a4", "b4", "c4", "d4", "e4", "f4", "g4", "h4",
	"a3", "b3", "c3", "d3", "e3", "f3", "g3", "h3",
	"a2", "b2", "c2", "d2", "e2", "f2", "g2", "h2",
	"a1", "b1", "c1", "d1", "e1", "f1", "g1", "h1",
}

// relevant occupancy bit counts for a rook at every square on board
var rookRelevantBits = [64]uint64{
	12, 11, 11, 11, 11, 11, 11, 12,
	11, 10, 10, 10, 10, 10, 10, 11,
	11, 10, 10, 10, 10, 10, 10, 11,
	11, 10, 10, 10, 10, 10, 10, 11,
	11, 10, 10, 10, 10, 10, 10, 11,
	11, 10, 10, 10, 10, 10, 10, 11,
	11, 10, 10, 10, 10, 10, 10, 11,
	12, 11, 11, 11, 11, 11, 11, 12,
}

// relevant occupancy bit counts for a bishop at every square on board
var bishopRelevantBits = [64]uint64{
	6, 5, 5, 5, 5, 5, 5, 6,
	5, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 7, 7, 7, 7, 5, 5,
	5, 5, 7, 9, 9, 7, 5, 5,
	5, 5, 7, 9, 9, 7, 5, 5,
	5, 5, 7, 7, 7, 7, 5, 5,
	5, 5, 5, 5, 5, 5, 5, 5,
	6, 5, 5, 5, 5, 5, 5, 6,
}

// bishop magic numbers initMagicNumbers()
var rookMagicNumbers = [64]uint64{
	0x2000380201000008,
	0x9002041009000030,
	0x1000430100100082,
	0x808008040002020,
	0x801a0105000424,
	0x12000018200000a0,
	0x2000020800220040,
	0x40801910d4004,
	0x1020210000040180,
	0x1915500080810013,
	0x2800000882600,
	0x28140010110a,
	0xc0018c1000262001,
	0xa001000200060,
	0xc00000e00a000500,
	0x4050008210040800,
	0x25c080804200101,
	0x14a0000c00001004,
	0x202008011001182,
	0x88d288c004000,
	0xa520042000120000,
	0x80280304a109080,
	0x841801400120030,
	0x800080000100001,
	0x3200a40580200001,
	0x400020500c00200,
	0x2020020410000010,
	0x1000082400000400,
	0x800402808004000,
	0x40000300a102020,
	0x80042002904000,
	0x181080480000041,
	0x540004900470302,
	0x2019004000c382,
	0x1040010001880800,
	0x9000200289008000,
	0x131042080000150,
	0x220800040c04800,
	0x8c02100001200,
	0x2022188000040120,
	0x20020891201800,
	0x608022088440411,
	0x8061840001108005,
	0x870001a040,
	0x7000000009018,
	0x1001064a2250000,
	0x2000820300180020,
	0x2040c09000060020,
	0x2008000004069210,
	0x8b08001220009,
	0x400032040004,
	0x20006200040280c0,
	0x20004403000010,
	0x8000c001020c0001,
	0x12040810902240,
	0x400c802211420200,
	0x1a10004004004,
	0xa09540042500000,
	0x540008008069,
	0x1080c804200,
	0xa000081241180380,
	0x800880000402445,
	0x8040035200202040,
	0x400080002440020,
}

// bishop magic numbers from initMagicNumbers()
var bishopMagicNumbers = [64]uint64{
	0x8000900140840092,
	0x804840004c900,
	0x4018a4000100200,
	0x2008028800020000,
	0x4003108c18304c34,
	0x2c08401405280000,
	0x100780600010,
	0xc408004a001040,
	0x800420008018010,
	0x1800012898000018,
	0x62040981c0001032,
	0x102120030402100,
	0x10182840048180,
	0x50405800000840,
	0x4300085008,
	0x11008402150a0200,
	0x840011004044280,
	0x704840810202,
	0x8000020e080001,
	0x8808008200808401,
	0x44c20212800000,
	0x18000d090041800,
	0x10e020504211200,
	0x200021018440400,
	0xaa0001210064048,
	0x241102000008124,
	0x100002c12180204,
	0x880200102070,
	0x40200052008011,
	0x430000d0,
	0x8024c0005408060f,
	0x400002000c50060,
	0x422008180c1020,
	0x2308102a00414400,
	0x2000082020004206,
	0x8004000c2024090,
	0x6006501801,
	0x88880004685010,
	0x10000802040003c0,
	0x1010430800024000,
	0x410041240190800,
	0x1804000b00810100,
	0x800002808000284,
	0x648041000,
	0x80010802081044,
	0x8080024009001042,
	0x3000dc020500020,
	0x80042000e00004,
	0x220802468032200,
	0x10858020080a0,
	0x2080604201818000,
	0x8002100214000,
	0x8040000821802000,
	0xa0001200000c020,
	0x100090004e800,
	0x28890000282040,
	0x40502920100000,
	0x8020293001200840,
	0x2605400040003000,
	0x2200002002800446,
	0x200806200a008,
	0x801400600042100,
	0x2900290080208400,
	0x5000020058,
}
